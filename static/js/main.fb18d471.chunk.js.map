{"version":3,"sources":["serviceWorker.js","components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","containers/App.js","index.js"],"names":["Boolean","window","location","hostname","match","Card","_ref","name","id","email","react_default","a","createElement","className","src","concat","alt","CardList","robots","map","user","i","components_Card","key","SearchBox","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onsearchChange","event","setState","serachfield","target","value","state","_this2","fetch","then","response","json","users","_this$state","filteredRobots","filter","robot","toLowerCase","includes","length","components_SearchBox","components_Scroll","components_CardList","Component","ReactDOM","render","containers_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"oLAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,wGCESC,EAZF,SAAAC,GAA0B,IAAvBC,EAAuBD,EAAvBC,KAAMC,EAAiBF,EAAjBE,GAAIC,EAAaH,EAAbG,MACxB,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAY,uDACfH,EAAAC,EAAAC,cAAA,OAAKE,IAAG,wBAAAC,OAA0BP,EAA1B,YAAwCQ,IAAI,UACpDN,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,UAAKL,GACLG,EAAAC,EAAAC,cAAA,SAAIH,MCCGQ,EAZE,SAAAX,GAAc,IAAZY,EAAYZ,EAAZY,OACjB,OACER,EAAAC,EAAAC,cAAA,WACGM,EAAOC,IAAI,SAACC,EAAMC,GACjB,OACEX,EAAAC,EAAAC,cAAEU,EAAF,CAAOC,IAAKF,EAAGb,GAAIY,EAAKZ,GAAID,KAAMa,EAAKb,KAAME,MAAOW,EAAKX,YCKpDe,EAXG,SAAAlB,GAAoB,IAAlBmB,EAAkBnB,EAAlBmB,aAClB,OACEf,EAAAC,EAAAC,cAAA,OAAKC,UAAY,OACfH,EAAAC,EAAAC,cAAA,SAAOC,UAAU,wCACjBa,KAAK,SACLC,YAAY,mBACZC,SAAUH,MCGDI,EATA,SAACC,GACd,OACEpB,EAAAC,EAAAC,cAAA,OAAKmB,MAAS,CAACC,UAAW,SAAUC,OAAQ,kBAAmBC,OAAQ,UACpEJ,EAAMK,WC4CEC,cA3Cb,SAAAA,IAAa,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACXC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QAmBFI,eAAiB,SAACC,GAChBR,EAAKS,SAAS,CAAEC,YAAaF,EAAMG,OAAOC,SAnB1CZ,EAAKa,MAAQ,CACXhC,OAAQ,GACR6B,YAAa,IAJJV,mFAQM,IAAAc,EAAAX,KACjBY,MAAM,8CACHC,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAG,GAAUL,EAAKL,SAAS,CAAC5B,OAASsC,uCAapC,IAAAC,EACwBjB,KAAKU,MAA5BhC,EADDuC,EACCvC,OAAQ6B,EADTU,EACSV,YACTW,EAAiBxC,EAAOyC,OAAO,SAAAC,GACnC,OAAOA,EAAMrD,KAAKsD,cAAcC,SAASf,EAAYc,iBAEvD,OAAQ3C,EAAO6C,OAGXrD,EAAAC,EAAAC,cAAA,OAAKC,UAAU,MACbH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,MAAd,iBACAH,EAAAC,EAAAC,cAACoD,EAAD,CAAWvC,aAAce,KAAKI,iBAC9BlC,EAAAC,EAAAC,cAACqD,EAAD,KACEvD,EAAAC,EAAAC,cAACsD,EAAD,CAAUhD,OAAQwC,MANxBhD,EAAAC,EAAAC,cAAA,4BA/BYuD,mBCOlBC,IAASC,OAAQ3D,EAAAC,EAAAC,cAAE0D,EAAF,MAASC,SAASC,eAAe,SNqH5C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMtB,KAAK,SAAAuB,GACjCA,EAAaC","file":"static/js/main.fb18d471.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\n\n\n// Distructuring from ES6;\n// const Card = (props) => {\n//   const {name, id, email} = props;\n\n// distructuring further!!!\nconst Card = ({ name, id, email } ) => {\n  return (\n    <div className = \"tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5\">\n      <img src={`https://robohash.org/${id}?200x200`} alt=\"robot\"/>\n      <div>\n        <h2>{name}</h2>\n        <p>{email}</p>\n      </div>\n    </div>\n  );\n}\n\nexport default Card;","import React from 'react';\nimport Card from './Card';\n\nconst CardList = ({robots}) => {\n  return (\n    <div>\n      {robots.map((user, i) => {\n        return (\n          < Card key={i} id={user.id} name={user.name} email={user.email} />\n        )\n      })}\n    </div>\n  )\n}\n\nexport default CardList;","import React from 'react';\n\nconst SearchBox = ({searchChange}) => {\n  return (\n    <div className = \"pa2\">\n      <input className=\"bg-lightest-blue ba b--green ma2 pa3 \"\n      type=\"search\"\n      placeholder=\"search robots...\"\n      onChange={searchChange}/>\n    </div>\n  )\n}\n\nexport default SearchBox;","import React from 'react';\n\nconst Scroll = (props) => {\n  return (\n    <div style = {{overflowY: 'scroll', border: '5px solid black', height: '450px' }}>\n      {props.children}\n    </div>\n  )\n}\n\n\nexport default Scroll;","import React, {Component} from 'react';\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox';\nimport Scroll from '../components/Scroll'\n\nclass App extends Component {\n  constructor(){\n    super();\n    this.state = {\n      robots: [],\n      serachfield: \"\"\n    }\n  }\n\n  componentDidMount(){\n    fetch('https://jsonplaceholder.typicode.com/users')\n      .then(response => response.json())\n      .then(users => {this.setState({robots : users})})\n      //this makes the page with 0 robot to show\n      // .then(users => {});\n  }\n\n  // componentWillMount(){\n  //   console.log(\"componentWillMount\");\n  // }\n\n  onsearchChange = (event) => {\n    this.setState({ serachfield: event.target.value });\n  }\n\n  render(){\n    const {robots, serachfield} = this.state; // destructuring \n    const filteredRobots = robots.filter(robot => {\n      return robot.name.toLowerCase().includes(serachfield.toLowerCase());\n    })\n    return !robots.length ?\n      <h1>loading</h1>:\n      (\n        <div className=\"tc\">\n          <h1 className=\"f1\">Robot Friends</h1>\n          <SearchBox searchChange={this.onsearchChange} />\n          <Scroll>\n            <CardList robots={filteredRobots} />\n          </Scroll>\n        </div>\n      )\n    }\n}\n\nexport default App;\n\n\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\n// import Card from './Card';\nimport App from './containers/App';\nimport './containers/App.css';\n\n\n\nReactDOM.render( < App/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}